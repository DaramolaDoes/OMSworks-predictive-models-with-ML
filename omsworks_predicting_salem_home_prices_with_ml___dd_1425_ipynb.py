# -*- coding: utf-8 -*-
"""OMSworks: predicting Salem OR home prices with ML | DD_1425.ipynb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RjYyWbZsxIC4G3CnEI1z9ub-iAlKnLlF
"""

#Salem, n=23; 2023-2024
#invest now or later (6m, 12m)
#linear regression models

#required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Salem Single Family 2023-2024 Dataset
data = {
    'Date': pd.date_range(start='2023-01-01', end='2024-11-01', freq='MS'),
    'Price': [346817, 346432, 346325, 345912, 346142, 347147, 348565, 352150, 351278, 351957, 352172, 352760,
              353509, 354841, 356232, 357869, 359233, 360019, 360226, 359848, 359662, 359563, 359563]
}
# Convert the dictionary to a DataFrame
df = pd.DataFrame(data)

# Add numeric index for regression purposes
df['Date_Ordinal'] = df['Date'].map(pd.Timestamp.toordinal)

#view dataset
df.info()

#view first four rows
df.head()

#view last four rows
df.tail()

#descriptive stats of the column
df.describe().T

#view complete, past 22 months
df

# 1. Average price for the last 22 months

average_price = df['Price'].mean()
print(f'Average price over the last 22 months: ${average_price:,.2f}')

# 2. Highest price for the last 22 months

highest_price = df['Price'].max()
print(f'Highest price over the last 22 months: ${highest_price:,.2f}')

# 3. Lowest price for the last 22 months

lowest_price = df['Price'].min()
print(f'Lowest price over the last 22 months: ${lowest_price:,.2f}')

# plotting the historical 22 months (2023-2024) Salem single family prices
plt.figure(figsize=(10, 6))
plt.plot(df['Date'], df['Price'], label='Historical Prices', marker='o', color='black')
plt.title('Historical Prices of Salem Single Family Homes (2023-2024)')
plt.xlabel('Date')
plt.ylabel('Price in $')

# Import necessary libraries
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Data preparation
df = pd.DataFrame(data)

# Convert Date to ordinal (for simplicity in linear regression)
df['Date_Ordinal'] = df['Date'].apply(lambda x: x.toordinal())

# Splitting the data into training and test sets (80/20)
X = df[['Date_Ordinal']]
y = df['Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Linear Regression model training
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)

# Predictions on test data
y_pred = lin_reg.predict(X_test)

# Model coefficients
intercept = lin_reg.intercept_
slope = lin_reg.coef_[0]

# Calculating accuracy metrics
mae_test = mean_absolute_error(y_test, y_pred)
rmse_test = np.sqrt(mean_squared_error(y_test, y_pred))

# Returning results
slope, intercept, mae_test, rmse_test

#linear regression model with historical Salem 2023-2024 data points

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LinearRegression
import numpy as np
import statsmodels.api as sm

# Prepare data for linear regression
df['time_numeric'] = (df['Date'] - df['Date'].min()).dt.days  # Convert dates to numeric for regression

# Define X (independent variable: time in days) and y (dependent variable: price)
X = df['time_numeric'].values.reshape(-1, 1)
y = df['Price'].values

# Fit the linear regression model
model = LinearRegression()
model.fit(X, y)

# Plot the linear regression line with the data points
plt.figure(figsize=(10,6))
plt.scatter(df['Date'], df['Price'], color='black', label="Actual Prices")
plt.plot(df['Date'], model.predict(X), color='blue', label="Linear Regression Line")
plt.title("Salem Single Family Homes Historical 2023-2024 Prices with Linear Regression")
plt.xlabel("Date")
plt.ylabel("Price in $")
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Import necessary libraries for OLS
import statsmodels.api as sm

# Prepare the data
df_real_estate = pd.DataFrame(data)
df_real_estate['Date_Ordinal'] = df_real_estate['Date'].apply(lambda x: x.toordinal())  # Convert dates to ordinal

# Prepare the independent (X) and dependent variable (y)
X = df_real_estate[['Date_Ordinal']]
y = df_real_estate['Price']

# Add a constant for OLS regression (intercept)
X_const = sm.add_constant(X)

# Perform OLS regression
ols_model = sm.OLS(y, X_const).fit()

# Linear regression equation
slope_ols = ols_model.params['Date_Ordinal']
intercept_ols = ols_model.params['const']
equation_ols = f"Price = {slope_ols:.4f} * Date_Ordinal + {intercept_ols:.2f}"

# Predict future prices for the next 12 months
future_dates = pd.date_range(start='2024-12-01', periods=12, freq='MS').to_frame(index=False, name='Date')
future_dates['Date_Ordinal'] = future_dates['Date'].apply(lambda x: x.toordinal())

# Add constant for future predictions
future_dates_const = sm.add_constant(future_dates[['Date_Ordinal']])

# Predict future prices
future_prices_ols = ols_model.predict(future_dates_const)

# Output OLS summary, equation, and future predictions
{
    "ols_summary": ols_model.summary(),
    "equation_ols": equation_ols,
    "future_prices_ols": future_prices_ols
}

# reimporting libraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Salem 2023-2024 single family real estate dataset
data = {
    'Date': pd.date_range(start='2023-01-01', end='2024-11-01', freq='MS'),
    'Price': [346817, 346432, 346325, 345912, 346142, 347147, 348565, 352150, 351278, 351957, 352172, 352760,
              353509, 354841, 356232, 357869, 359233, 360019, 360226, 359848, 359662, 359563, 359563]
}

df = pd.DataFrame(data)
# Creating the DataFrame
df = pd.DataFrame(data)

# Preparing the data for linear regression
df['date_ordinal'] = df['Date'].map(pd.Timestamp.toordinal)  # Convert dates to ordinal for regression

# Linear regression model
X = df['date_ordinal'].values.reshape(-1, 1)  # Dates as independent variable
y = df['Price'].values  # Prices as dependent variable

model = LinearRegression()
model.fit(X, y)

# Predicted values for plotting
y_pred = model.predict(X)

# Adding the predicted price for 1/1/2025 to the dataset for visualization
predicted_date = pd.to_datetime('2025-1-01')
predicted_price = model.predict([[predicted_date.toordinal()]])[0]

# Plotting the actual prices, regression line, and predicted value
plt.figure(figsize=(12,8))
plt.scatter(df['Date'], df['Price'], color='black', label='Actual prices')
plt.plot(df['Date'], y_pred, color='blue', label='Linear regression line')

# Highlighting the predicted value for 1/1/2025
plt.scatter(predicted_date, predicted_price, color='green', label=f'Predicted for {predicted_date.strftime("%m/%d/%Y")}', s=100)

# Annotating the predicted value
plt.text(predicted_date, predicted_price, f"${predicted_price:.2f}", fontsize=10, color='green', ha='right')

# Plot settings
plt.title('Linear Regression with Predicted Price for 1/1/2025')
plt.xlabel('Date')
plt.ylabel('Price')
plt.grid(True)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()

plt.show()

# reimporting libraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Salem 2023-2024 single family real estate dataset
data = {
    'Date': pd.date_range(start='2023-01-01', end='2024-11-01', freq='MS'),
    'Price': [346817, 346432, 346325, 345912, 346142, 347147, 348565, 352150, 351278, 351957, 352172, 352760,
              353509, 354841, 356232, 357869, 359233, 360019, 360226, 359848, 359662, 359563, 359563]
}

df = pd.DataFrame(data)
# Creating the DataFrame
df = pd.DataFrame(data)

# Preparing the data for linear regression
df['date_ordinal'] = df['Date'].map(pd.Timestamp.toordinal)  # Convert dates to ordinal for regression

# Linear regression model
X = df['date_ordinal'].values.reshape(-1, 1)  # Dates as independent variable
y = df['Price'].values  # Prices as dependent variable

model = LinearRegression()
model.fit(X, y)

# Predicted values for plotting
y_pred = model.predict(X)

# Adding the predicted price for 3/1/2025 to the dataset for visualization
predicted_date = pd.to_datetime('2025-3-01')
predicted_price = model.predict([[predicted_date.toordinal()]])[0]

# Plotting the actual prices, regression line, and predicted value
plt.figure(figsize=(12,8))
plt.scatter(df['Date'], df['Price'], color='black', label='Actual prices')
plt.plot(df['Date'], y_pred, color='blue', label='Linear regression line')

# Highlighting the predicted value for 3/1/2025
plt.scatter(predicted_date, predicted_price, color='green', label=f'Predicted for {predicted_date.strftime("%m/%d/%Y")}', s=100)

# Annotating the predicted value
plt.text(predicted_date, predicted_price, f"${predicted_price:.2f}", fontsize=10, color='green', ha='right')

# Plot settings
plt.title('Linear Regression with Predicted Price for 3/1/2025')
plt.xlabel('Date')
plt.ylabel('Price')
plt.grid(True)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()

plt.show()

# reimporting libraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Salem 2023-2024 single family real estate dataset
data = {
    'Date': pd.date_range(start='2023-01-01', end='2024-11-01', freq='MS'),
    'Price': [346817, 346432, 346325, 345912, 346142, 347147, 348565, 352150, 351278, 351957, 352172, 352760,
              353509, 354841, 356232, 357869, 359233, 360019, 360226, 359848, 359662, 359563, 359563]
}

df = pd.DataFrame(data)
# Creating the DataFrame
df = pd.DataFrame(data)

# Preparing the data for linear regression
df['date_ordinal'] = df['Date'].map(pd.Timestamp.toordinal)  # Convert dates to ordinal for regression

# Linear regression model
X = df['date_ordinal'].values.reshape(-1, 1)  # Dates as independent variable
y = df['Price'].values  # Prices as dependent variable

model = LinearRegression()
model.fit(X, y)

# Predicted values for plotting
y_pred = model.predict(X)

# Adding the predicted price for 6/1/2025 to the dataset for visualization
predicted_date = pd.to_datetime('2025-6-01')
predicted_price = model.predict([[predicted_date.toordinal()]])[0]

# Plotting the actual prices, regression line, and predicted value
plt.figure(figsize=(12,8))
plt.scatter(df['Date'], df['Price'], color='black', label='Actual prices')
plt.plot(df['Date'], y_pred, color='blue', label='Linear regression line')

# Highlighting the predicted value for 6/1/2025
plt.scatter(predicted_date, predicted_price, color='green', label=f'Predicted for {predicted_date.strftime("%m/%d/%Y")}', s=100)

# Annotating the predicted value
plt.text(predicted_date, predicted_price, f"${predicted_price:.2f}", fontsize=10, color='green', ha='right')

# Plot settings
plt.title('Linear Regression with Predicted Price for 6/1/2025')
plt.xlabel('Date')
plt.ylabel('Price')
plt.grid(True)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()

plt.show()

# 1. Average price for the last 22 months

average_price = df['Price'].mean()
print(f'Average price over the last 22 months: ${average_price:,.2f}')

# 2. Highest price for the last 22 months

highest_price = df['Price'].max()
print(f'Highest price over the last 22 months: ${highest_price:,.2f}')

# 3. Lowest price for the last 22 months

lowest_price = df['Price'].min()
print(f'Lowest price over the last 22 months: ${lowest_price:,.2f}')

#ML prediction 1/1/25 - $363398.98
#ML prediction 3/1/25 - $364885.49
#ML prediction 6/1/25 - $367203.42

def calculate_projected_savings(purchase_price, predicted_price):
    # Calculate the difference between predicted and purchase price
    price_difference = predicted_price - purchase_price

    # Calculate the percentage increase
    percentage_increase = (price_difference / purchase_price) * 100

    return percentage_increase

# Inputs
purchase_price = 353400  # Purchase price of the home
predicted_price = 367203  # Predicted price of the home in June 2025

# Calculate the projected savings
projected_savings = calculate_projected_savings(purchase_price, predicted_price)

# Output the result
print(f"The projected percentage saved on the investment is {projected_savings:.2f}%")

def calculate_projected_savings(purchase_price, predicted_price):
    # Calculate the difference between predicted and purchase price
    dollar_saved = predicted_price - purchase_price

    return dollar_saved

# Inputs
purchase_price = 353400  # Purchase price of the home
predicted_price = 367203  # Predicted price of the home in June 2025

# Calculate the projected savings
projected_savings = calculate_projected_savings(purchase_price, predicted_price)

# Output the result
print(f"The projected dollar saved on the investment is ${projected_savings:,}")

#Recommendation buy now due to:
#1: 1/1/25 ML prediction being the lowest for Salem single family home investors
#2: 3.91% projected percentage saved on the investment
#3: $13,803 projected dollar saved on the investment